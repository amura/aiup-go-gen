mcp_tools:
  - name: stripe_mcp
    endpoint: http://localhost:8080
    description: >
      Use this tool to interact with the Stripe MCP API (customer, charge, payment intent, etc.) only when payment related features are required and stripe is mentioned as the platform.
    operations:
      - name: create_customer
        path: /v1/customers
        method: POST
        description: Create a Stripe customer
        example_args: { "email": "user@example.com" }
        required: []
      # - name: retrieve_customer
      #   path: /v1/customers/{id}
      #   method: GET
      #   description: Get customer by ID
      #   example_args: {}
      # - name: create_payment_intent
      #   path: /v1/payment_intents
      #   method: POST
      #   description: Create a new payment intent
      #   example_args: { "amount": 5000, "currency": "usd" }
      # - name: list_charges
      #   path: /v1/charges
      #   method: GET
      #   description: List all charges
      #   example_args: {}
      # ...add as many as you wish from MCP docs...
  - name: docker_exec
    operations:
      - name: docker_exec
        description: Execute and validate code blocks by executing them in a docker container
        example_args: { "code_blocks": "```bash\n #filename test.sh ```", "init": "init.sh", "launch.sh": "launch.sh", "docker_file": "FROM node\n..." }
        required: []
  # - name: github_mcp
  #   endpoint: http://localhost:8090
  #   description: >
  #     Use this tool to interact with the GitHub MCP API (repository, issue, user management, etc.).
  #   operations:
  #     - name: Create Repo
  #       path: /repos
  #       method: POST
  #       description: Create a new GitHub repository
  #       example_args: { "name": "my-repo", "private": false }
  #     - name: List Issues
  #       path: /repos/{owner}/{repo}/issues
  #       method: GET
  #       description: List issues for a repository
  #       example_args: {}
      # ...extend for AWS, etc...